# test inverse_1
  matrix_t test = {0}, result = {0};

  s21_create_matrix(3, 7, &test);
  s21_create_matrix(7, 7, &result);
  ck_assert_int_eq(s21_inverse_matrix(&test, &result), CALCULATION_ERROR);
  s21_remove_matrix(&test);
  s21_remove_matrix(&result);


# test inverse_2
  matrix_t test = {0}, result = {0};
  s21_create_matrix(7, 7, &result);
  ck_assert_int_eq(s21_inverse_matrix(&test, &result), INCORRECT_MATRIX);
  s21_remove_matrix(&result);


# test inverse_3
  matrix_t test = {0}, result = {0};
  int M = 1, N = 1;
  s21_create_matrix(M, N, &test);
  s21_create_matrix(M, N, &result);
  test.matrix[0][0] = 0.01;
  ck_assert_int_eq(s21_inverse_matrix(&test, &result), OK);
  ck_assert_double_eq(1, result.matrix[0][0]);
  s21_remove_matrix(&test);
  s21_remove_matrix(&result);

# test inverse_4
  matrix_t test = {0}, result = {0};
  int M = 2, N = 2;

  s21_create_matrix(M, N, &result);
  s21_create_matrix(M, N, &test);

  test.matrix[0][0] = 4;
  test.matrix[0][1] = 2;
  test.matrix[1][0] = 0.6;
  test.matrix[1][1] = 0.3;

  ck_assert_int_eq(s21_inverse_matrix(&test, &result), CALCULATION_ERROR);

  s21_remove_matrix(&test);
  s21_remove_matrix(&result);
