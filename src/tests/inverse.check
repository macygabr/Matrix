# test inverse_1
  matrix_t test = {0}, result = {0};

  s21_create_matrix(3, 7, &test);
  s21_create_matrix(7, 7, &result);
  ck_assert_int_eq(s21_inverse_matrix(&test, &result), CALCULATION_ERROR);
  s21_remove_matrix(&test);
  s21_remove_matrix(&result);


# test inverse_2
  matrix_t test = {0}, result = {0};
  s21_create_matrix(7, 7, &result);
  ck_assert_int_eq(s21_inverse_matrix(&test, &result), INCORRECT_MATRIX);
  s21_remove_matrix(&result);


# test inverse_3
  const int size = 3;
  matrix_t m = {0};
  s21_create_matrix(size, size, &m);

  m.matrix[0][0] = 2;
  m.matrix[0][1] = 5;
  m.matrix[0][2] = 7;
  m.matrix[1][0] = 6;
  m.matrix[1][1] = 3;
  m.matrix[1][2] = 4;
  m.matrix[2][0] = 5;
  m.matrix[2][1] = -2;
  m.matrix[2][2] = -3;

  matrix_t res = {0};
  s21_inverse_matrix(&m, &res);

  matrix_t expected = {0};
  s21_create_matrix(size, size, &expected);
  expected.matrix[0][0] = 1;
  expected.matrix[0][1] = -1;
  expected.matrix[0][2] = 1;
  expected.matrix[1][0] = -38;
  expected.matrix[1][1] = 41;
  expected.matrix[1][2] = -34;
  expected.matrix[2][0] = 27;
  expected.matrix[2][1] = -29;
  expected.matrix[2][2] = 24;

  ck_assert_int_eq(s21_eq_matrix(&expected, &res), SUCCESS);

  s21_remove_matrix(&expected);
  s21_remove_matrix(&res);
  s21_remove_matrix(&m);

# test inverse_4
  matrix_t test = {0}, result = {0};
  int M = 2, N = 2;

  s21_create_matrix(M, N, &result);
  s21_create_matrix(M, N, &test);

  test.matrix[0][0] = 4;
  test.matrix[0][1] = 2;
  test.matrix[1][0] = 0.6;
  test.matrix[1][1] = 0.3;

  ck_assert_int_eq(s21_inverse_matrix(&test, &result), CALCULATION_ERROR);

  s21_remove_matrix(&test);
  s21_remove_matrix(&result);
