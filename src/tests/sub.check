# test sub_1
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};

  s21_create_matrix(3, 5, &test_1);
  s21_create_matrix(2, 5, &test_2);
  s21_create_matrix(2, 5, &result);

  ck_assert_int_eq(s21_sub_matrix(&test_1, &test_2, &result),
                   CALCULATION_ERROR);

  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);
  s21_remove_matrix(&result);

# test sub_2
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};

  s21_create_matrix(3, 5, &test_1);
  s21_create_matrix(3, 5, &result);

  ck_assert_int_eq(s21_sub_matrix(&test_1, &test_2, &result),
                   INCORRECT_MATRIX);

  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);
  s21_remove_matrix(&result);

# test sub_3
  int rows = rand() % 100 + 1;
  int cols = rand() % 100 + 1;
  matrix_t m = {0};
  s21_create_matrix(rows, cols, &m);
  matrix_t mtx = {0};
  s21_create_matrix(rows, cols, &mtx);
  matrix_t check = {0};
  s21_create_matrix(rows, cols, &check);

  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      m.matrix[i][j] = get_rand(DBL_MIN, DBL_MAX);
      mtx.matrix[i][j] = get_rand(DBL_MIN, DBL_MAX);
      check.matrix[i][j] = m.matrix[i][j] - mtx.matrix[i][j];
    }
  }
  matrix_t res = {0};
  ck_assert_int_eq(s21_sub_matrix(&m, &mtx, &res), OK);
  ck_assert_int_eq(s21_eq_matrix(&check, &res), SUCCESS);

  s21_remove_matrix(&m);
  s21_remove_matrix(&mtx);
  s21_remove_matrix(&res);
  s21_remove_matrix(&check);

