# test create_1
  matrix_t test = {0};
  ck_assert_int_eq(s21_create_matrix(-3, -4, &test), INCORRECT_MATRIX);


# test create_2
  matrix_t test = {0};
  ck_assert_int_eq(s21_create_matrix(0, 0, &test), INCORRECT_MATRIX);


# test create_3
  matrix_t test = {0};
  ck_assert_int_eq(s21_create_matrix(5.5, 2.7, &test), OK);
  if (test.matrix) {
    s21_remove_matrix(&test);
    ck_assert(!test.matrix);
  }


# test create_4
  matrix_t test = {0};
  ck_assert_int_eq(s21_create_matrix(1, 1, &test), OK);
  if (test.matrix) {
    s21_remove_matrix(&test);
    ck_assert(!test.matrix);
  }
  
# test create_5
 const int rows = rand() % 100 + 1;
  const int cols = rand() % 100 + 1;
  matrix_t m = {0};
  s21_create_matrix(rows, cols, &m);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      m.matrix[i][j] = 0;
      ck_assert_ldouble_eq_tol(0, m.matrix[i][j], 1e-07);
    }
  }
  ck_assert_int_eq(m.rows, rows);
  ck_assert_int_eq(m.columns, cols);
  s21_remove_matrix(&m);