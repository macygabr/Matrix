# test equal_1
  matrix_t test_1 = {0}, test_2 = {0};

  s21_create_matrix(2, 6, &test_1);
  s21_create_matrix(3, 4, &test_2);
  ck_assert_int_eq(s21_eq_matrix(&test_1, &test_2), FAILURE);
  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);


# test equal_2
  matrix_t test_1 = {0}, test_2 = {0};

  ck_assert_int_eq(s21_create_matrix(3, 2, &test_1), OK);
  ck_assert_int_eq(s21_create_matrix(3, 2, &test_2), OK);
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 2; j++)
      test_1.matrix[i][j] = test_2.matrix[i][j] = 1 + i + j;
  ck_assert_int_eq(s21_eq_matrix(&test_1, &test_2), SUCCESS);
  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);

# test equal_3
  matrix_t test_1 = {0}, test_2 = {0};

  s21_create_matrix(2, 4, &test_1);
  s21_create_matrix(2, 4, &test_2);
  for (int i = 0; i < 2; i++)
    for (int j = 0; j < 4; j++) {
      test_1.matrix[i][j] = (rand() - rand()) / 10000.123;
      test_2.matrix[i][j] = (rand() - rand()) / 10000.123;
    }

  ck_assert_int_eq(s21_eq_matrix(&test_1, &test_2), FAILURE);

  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);
