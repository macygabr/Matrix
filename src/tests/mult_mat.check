# test mult_matrix_1
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};

  s21_create_matrix(2, 8, &test_1);
  s21_create_matrix(6, 7, &test_2);
  s21_create_matrix(4, 6, &result);

  ck_assert_int_eq(s21_mult_matrix(&test_1, &test_2, &result),
                   CALCULATION_ERROR);
  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);
  s21_remove_matrix(&result);

# test mult_matrix_2
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};
  s21_create_matrix(5, 5, &result);
  ck_assert_int_eq(s21_mult_matrix(&test_1, &test_2, &result),
                   INCORRECT_MATRIX);
  s21_remove_matrix(&result);

# test mult_matrix_3
  const int rows = 2;
  const int cols = 3;
  matrix_t m = {0};
  s21_create_matrix(rows, cols, &m);
  matrix_t mtx = {0};
  s21_create_matrix(cols, rows, &mtx);

  for (int i = 0, c = 1; i < rows; i++)
    for (int j = 0; j < cols; j++)
      m.matrix[i][j] = c++;

  for (int i = 0, c = 7; i < cols; i++)
    for (int j = 0; j < rows; j++)
      mtx.matrix[i][j] = c++;

  matrix_t check = {0};
  s21_create_matrix(m.rows, mtx.columns, &check);
  check.matrix[0][0] = 58;
  check.matrix[0][1] = 64;
  check.matrix[1][0] = 139;
  check.matrix[1][1] = 154;

  matrix_t res = {0};
  ck_assert_int_eq(s21_mult_matrix(&m, &mtx, &res), OK);
  ck_assert_int_eq(s21_eq_matrix(&check, &res), SUCCESS);

  s21_remove_matrix(&m);
  s21_remove_matrix(&mtx);
  s21_remove_matrix(&res);
  s21_remove_matrix(&check);
