# test mult_matrix_1
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};

  s21_create_matrix(2, 8, &test_1);
  s21_create_matrix(6, 7, &test_2);
  s21_create_matrix(4, 6, &result);

  ck_assert_int_eq(s21_mult_matrix(&test_1, &test_2, &result),
                   CALCULATION_ERROR);
  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);
  s21_remove_matrix(&result);

# test mult_matrix_2
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};
  s21_create_matrix(5, 5, &result);
  ck_assert_int_eq(s21_mult_matrix(&test_1, &test_2, &result),
                   INCORRECT_MATRIX);
  s21_remove_matrix(&result);

# test mult_matrix_3
  matrix_t test_1 = {0}, test_2 = {0}, result = {0};
  int M = 1 + rand() % 9, N = 1 + rand() % 9, K = 1 + rand() % 9;

  s21_create_matrix(M, K, &test_1);
  s21_create_matrix(K, N, &test_2);
  s21_create_matrix(M, N, &result);
  for (int i = 0; i < M; i++)
    for (int j = 0; j < K; j++)
      test_1.matrix[i][j] = (rand() - rand()) / 987654.3210987;
  for (int i = 0; i < K; i++)
    for (int j = 0; j < N; j++)
      test_2.matrix[i][j] = (rand() - rand()) / 987654.3210987;

  M = rand() % M;
  N = rand() % N;

  ck_assert_int_eq(s21_mult_matrix(&test_1, &test_2, &result), OK);

  double mult = 0;
  for (int k = 0; k < K; k++) mult += test_1.matrix[M][k] * test_2.matrix[k][N];

  ck_assert_double_eq_tol(mult, result.matrix[M][N], EPS);

  s21_remove_matrix(&test_1);
  s21_remove_matrix(&test_2);
  s21_remove_matrix(&result);
