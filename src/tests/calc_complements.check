# test complements_1
  matrix_t test = {0}, result = {0};

  s21_create_matrix(3, 7, &test);
  s21_create_matrix(7, 7, &result);

  ck_assert_int_eq(s21_calc_complements(&test, &result), CALCULATION_ERROR);

  s21_remove_matrix(&test);
  s21_remove_matrix(&result);

# test complements_2
  matrix_t test = {0}, result = {0};

  s21_create_matrix(7, 7, &result);

  ck_assert_int_eq(s21_calc_complements(&test, &result),
                   INCORRECT_MATRIX);

  s21_remove_matrix(&result);

# test complements_3
  const int size = 3;
  matrix_t m = {0};
  s21_create_matrix(size, size, &m);

  m.matrix[0][0] = 1;
  m.matrix[0][1] = 2;
  m.matrix[0][2] = 3;
  m.matrix[1][0] = 0;
  m.matrix[1][1] = 4;
  m.matrix[1][2] = 2;
  m.matrix[2][0] = 5;
  m.matrix[2][1] = 2;
  m.matrix[2][2] = 1;

  matrix_t res = {0};
  s21_inverse_matrix(&m, &res);

  matrix_t expected = {0};
  s21_create_matrix(size, size, &expected);
  expected.matrix[0][0] = 0;
  expected.matrix[0][1] = 10;
  expected.matrix[0][2] = -20;
  expected.matrix[1][0] = -4;
  expected.matrix[1][1] = -14;
  expected.matrix[1][2] = 8;
  expected.matrix[2][0] = -8;
  expected.matrix[2][1] = -2;
  expected.matrix[2][2] = 4;

  ck_assert_int_eq(s21_eq_matrix(&expected, &res), 0);

  s21_remove_matrix(&expected);
  s21_remove_matrix(&res);
  s21_remove_matrix(&m);