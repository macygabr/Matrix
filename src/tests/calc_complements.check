# test complements_1
  matrix_t test = {0}, result = {0};

  s21_create_matrix(3, 7, &test);
  s21_create_matrix(7, 7, &result);

  ck_assert_int_eq(s21_calc_complements(&test, &result), CALCULATION_ERROR);

  s21_remove_matrix(&test);
  s21_remove_matrix(&result);

# test complements_2
  matrix_t test = {0}, result = {0};

  s21_create_matrix(7, 7, &result);

  ck_assert_int_eq(s21_calc_complements(&test, &result),
                   INCORRECT_MATRIX);

  s21_remove_matrix(&result);

# test complements_3
  matrix_t test = {0}, result = {0};
  int M = 1, N = 1;

  s21_create_matrix(M, N, &test);
  s21_create_matrix(M, N, &result);
  test.matrix[0][0] = 3.0;

  ck_assert_int_eq(s21_calc_complements(&test, &result), OK);
  ck_assert_double_eq(test.matrix[0][0], result.matrix[0][0]);

  s21_remove_matrix(&test);
  s21_remove_matrix(&result);

# test complements_4
  matrix_t test = {0}, result = {0};
  int M = 3, N = 3;

  s21_create_matrix(M, N, &test);
  s21_create_matrix(M, N, &result);
  test.matrix[0][0] = 1;
  test.matrix[0][1] = 2;
  test.matrix[0][2] = 3;

  test.matrix[1][0] = 0;
  test.matrix[1][1] = 4;
  test.matrix[1][2] = 2;

  test.matrix[2][0] = 5;
  test.matrix[2][1] = 2;
  test.matrix[2][2] = 1;

  ck_assert_int_eq(s21_calc_complements(&test, &result), OK);

  test.matrix[0][0] = 0;
  test.matrix[0][1] = 10;
  test.matrix[0][2] = -20;

  test.matrix[1][0] = 4;
  test.matrix[1][1] = -14;
  test.matrix[1][2] = 8;

  test.matrix[2][0] = -8;
  test.matrix[2][1] = -2;
  test.matrix[2][2] = 4;

  for (int i = 0; i < M; i++)
    for (int j = 0; j < N; j++)
      ck_assert_double_eq(test.matrix[i][j], result.matrix[i][j]);

  s21_remove_matrix(&test);
  s21_remove_matrix(&result);
